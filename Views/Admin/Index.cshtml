@model MasterViewModel

<!doctype html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <meta name="description" content="">
    <meta name="author" content="">
    <link rel="icon" href="/docs/4.1/assets/img/favicons/favicon.ico">

    <title>Dashboard Template for Bootstrap</title>

    <link rel="canonical" href="https://getbootstrap.com/docs/4.1/examples/dashboard/">

    <!-- Bootstrap core CSS -->
    <link href="~/css/bootstrap.mint.css" rel="stylesheet">
    <link href="~/css/bootstrap.min.css" rel="stylesheet">
    <link href="dashboard.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/chart.js@2.7.1/dist/Chart.min.js"></script>

    <style>
        .sidebar {
            position: fixed;
            top: 51px;
            bottom: 0;
            left: 0;
            z-index: 1000;
            display: block;
            padding: 10px;
            overflow-x: hidden;
            overflow-y: auto;
            background-color: #f5f5f5;
            border-right: 1px solid #eee;
            width: 250px;
        }

        .main-content {
            margin-left: 250px;
            padding: 20px;
        }

        .chart-container {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 400px;
            width: 100%;
            margin-top: 80px;
            margin-left: 200px;
            background-color: aliceblue;
        }

        .chart-container-bar {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 400px;
            width: 100%;
            margin-top: 30px;
            margin-left: 200px;
            background-color: aliceblue;
        }
    </style>
</head>

<body>
    <div class="container-fluid">
        <div class="row">
            <nav class="col-md-2 d-none d-md-block bg-light sidebar">
                <div class="nav nav-sidebar">
                    <ul class="nav flex-column">
                        <li class="nav-item">
                            <a class="nav-link active" href="@Url.Action("Index","Admin")">
                                <span data-feather="home"></span>
                                Admin Dashboard <span class="sr-only"></span>
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="@Url.Action("AdminOnay","Admin")">
                                <span data-feather="user"></span>
                                Organizatör Onayları
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="@Url.Action("Index", "Konser")">
                                <span data-feather="headphones"></span>
                                Konserler
                            </a>
                        </li>
                    </ul>

                    <h6 class="sidebar-heading d-flex justify-content-between align-items-center px-3 mt-4 mb-1 text-muted">
                        <span>Raporlamalar</span>
                        <a class="d-flex align-items-center text-muted" href="#">
                            <span data-feather="plus-circle"></span>
                        </a>
                    </h6>
                    <ul class="nav flex-column mb-2">
                        <li class="nav-item">
                            <a class="nav-link" href="@Url.Action("Index", "Konser")" style="color:lightpink">
                                <span data-feather="music" style="color:lightpink"></span>
                                Konserler ve Satılan Bilet Sayıları
                            </a>
                        </li>
                    </ul>
                </div>
            </nav>

            <main class="col-md-9 ml-sm-auto col-lg-10 px-4">
                <div class="chart-container">
                    <canvas class="my-4 w-100" id="biletChart" width="800" height="380"></canvas>
                </div>

                <div class="chart-container-bar">
                    <canvas class="my-4 w-100" id="biletFiyatChart" width="800" height="380"></canvas>
                </div>
            </main>
        </div>
    </div>

    <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>
    <script>window.jQuery || document.write('<script src="../../assets/js/vendor/jquery-slim.min.js"><\/script>')</script>
    <script src="../../assets/js/vendor/popper.min.js"></script>
    <script src="../../dist/js/bootstrap.min.js"></script>

    <script src="https://unpkg.com/feather-icons/dist/feather.min.js"></script>
    <script>
        feather.replace()
    </script>

    <script>
        var ctxBilet = document.getElementById('biletChart').getContext('2d');
        var ctxFiyat = document.getElementById('biletFiyatChart').getContext('2d');

        var today = new Date();
        var oneWeekAgo = new Date();
        oneWeekAgo.setDate(today.getDate() - 7);

        //Satış Verileri
        var labels = @Html.Raw(Json.Serialize(Model.BiletSatisVerileri.Select(x => x.Tarih.ToString("yyyy-MM-dd"))));
        var data = @Html.Raw(Json.Serialize(Model.BiletSatisVerileri.Select(x => x.BiletSayisi)));

        var filteredData = {};
        for (var i = 0; i < labels.length; i++) {
            var date = new Date(labels[i]);
            if (date >= oneWeekAgo && date <= today) {
                var dateString = labels[i];
                if (!filteredData[dateString]) {
                    filteredData[dateString] = 0;
                }
                filteredData[dateString] += data[i];
            }
        }
        var allDates = [];
        var allData = [];
        for (var d = new Date(oneWeekAgo); d <= today; d.setDate(d.getDate() + 1)) {
            var dateString = d.toISOString().split('T')[0];
            allDates.push(dateString);
            allData.push(filteredData[dateString] || 0);
        }

        //Bilet Satış Chart
        var biletChart = new Chart(ctxBilet, {
            type: 'line',
            data: {
                labels: allDates,
                datasets: [{
                    label: 'Satılan Biletler',
                    data: allData,
                    borderColor: '#007bff',
                    backgroundColor: 'rgba(0, 123, 255, 0.2)',
                    borderWidth: 2,
                    pointRadius: 4,
                    pointBackgroundColor: '#007bff',
                    lineTension: 0.1
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    x: {
                        type: 'time',
                        time: {
                            unit: 'day',
                            tooltipFormat: 'll'
                        },
                        title: {
                            display: true,
                            text: 'Tarih'
                        },
                        grid: {
                            display: false
                        }
                    },
                    y: {
                        title: {
                            display: true,
                            text: 'Satılan Bilet Sayısı'
                        },
                        ticks: {
                            beginAtZero: true
                        },
                        grid: {
                            borderDash: [2, 2]
                        }
                    }
                },
                plugins: {
                    legend: {
                        display: true,
                        position: 'top'
                    },
                    tooltip: {
                        callbacks: {
                            label: function (context) {
                                var label = context.dataset.label || '';
                                if (label) {
                                    label += ': ';
                                }
                                if (context.parsed.y !== null) {
                                    label += context.parsed.y + ' bilet';
                                }
                                return label;
                            }
                        }
                    }
                }
            }
        });

        var fiyatLabels = @Html.Raw(Json.Serialize(Model.BiletFiyatVerileri.Select(x => x.KonserName)));
        var fiyatData = @Html.Raw(Json.Serialize(Model.BiletFiyatVerileri.Select(x => x.ToplamBiletFiyati)));

        //Bilet Fiyat Chart
        var renkPaleti = [
            'rgba(255, 99, 132, 0.2)', // Kırmızı
            'rgba(54, 162, 235, 0.2)', // Mavi
            'rgba(255, 206, 86, 0.2)', // Sarı
            'rgba(75, 192, 192, 0.2)', // Yeşil
            'rgba(153, 102, 255, 0.2)', // Mor
            'rgba(255, 159, 64, 0.2)'  // Turuncu
        ];

        var konserler = @Html.Raw(Json.Serialize(Model.BiletFiyatVerileri.Select(x => x.KonserName)));
        var fiyatlar = @Html.Raw(Json.Serialize(Model.BiletFiyatVerileri.Select(x => x.ToplamBiletFiyati)));

        //renk paleti ile bar chartta dinamik renk olusturmak icin:
        var renkler = konserler.map((_, i) => renkPaleti[i % renkPaleti.length]);

        var ctxFiyat = document.getElementById('biletFiyatChart').getContext('2d');
        var biletFiyatChart = new Chart(ctxFiyat, {
            type: 'bar',
            data: {
                labels: konserler,
                datasets: [{
                    label: 'Toplam Bilet Fiyatları',
                    data: fiyatlar,
                    backgroundColor: renkler,
                    borderColor: renkler.map(color => color.replace('0.2', '1')), // Kenarlık rengini aynı yapalım
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    x: {
                        title: {
                            display: true,
                            text: 'Konserler'
                        },
                        grid: {
                            display: false
                        }
                    },
                    y: {
                        title: {
                            display: true,
                            text: 'Toplam Bilet Fiyatı (TL)'
                        },
                        ticks: {
                            beginAtZero: true
                        },
                        grid: {
                            borderDash: [2, 2]
                        }
                    }
                },
                plugins: {
                    legend: {
                        display: true,
                        position: 'top'
                    },
                    tooltip: {
                        callbacks: {
                            label: function (context) {
                                var label = context.dataset.label || '';
                                if (label) {
                                    label += ': ';
                                }
                                if (context.parsed.y !== null) {
                                    label += context.parsed.y + ' TL';
                                }
                                return label;
                            }
                        }
                    }
                }
            }
        });
    </script>
</body>
</html>
